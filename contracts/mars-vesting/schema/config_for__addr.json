{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config_for_Addr",
  "type": "object",
  "required": [
    "address_provider_address"
  ],
  "properties": {
    "address_provider_address": {
      "description": "Address provider address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "default_unlock_schedule": {
      "description": "By default, unlocking starts at Mars launch, with a cliff of 6 months and a duration of 36 months.\n\nAn allocation can have personalized unlocking schedule, but if that is not specified, will use this global default schedule instead.\n\nIf the global default schedule is not known at contract instantiation (e.g. if vesting contract needs to be deployed earlier than the other components of the protocol), then set this to None in `InstantiationMsg`.",
      "anyOf": [
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Schedule": {
      "type": "object",
      "required": [
        "cliff",
        "duration",
        "start_time"
      ],
      "properties": {
        "cliff": {
          "description": "Number of seconds starting UST during which no token will be vested/unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "duration": {
          "description": "Number of seconds taken since UST for tokens to be fully vested/unlocked",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "start_time": {
          "description": "Timestamp of when vesting/unlocking is to be started (in seconds)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
